version: "3.8"

services:
  #############################################
  #      Collect metrics from services        #
  #############################################

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitorization/prometheus:/etc/prometheus/
      - ./monitorization/prometheus/storage:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    ports:
      - "9090"

  #############################################
  #      Centralize all metrics and logs      #
  #############################################

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./monitorization/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitorization/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./monitorization/grafana/storage:/var/lib/grafana
      - ./monitorization/grafana/plugins:/var/lib/grafana/plugins
    restart: unless-stopped
    ports:
      - 3010:${GRAFANA_PORT}
    depends_on:
      - prometheus

  #############################################
  # Services communication and message queue  #
  #############################################

  rabbitmq:
    image: rabbitmq:3.12.9-alpine
    ports:
      - ${RABBITMQ_PORT}
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    mem_limit: 1024m
    mem_reservation: 256m

  #############################################
  #              Web app server               #
  #############################################

  gin-gonic:
    build:
      context: ./api-gateway/gin-gonic
      target: local
    ports:
      - 8080:${GIN_PORT}
      - "9093:9093"
    volumes:
      - ./api-gateway/gin-gonic:/app
    restart: always
    depends_on:
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - ENV_MODE=LOCAL
      - JWT_SECRET=${JWT_SECRET}
      - KEY_DECRYPT_PASSWD=${KEY_DECRYPT_PASSWD}
      - IV_BLOCK_PASSWD=${IV_BLOCK_PASSWD}
      - MONGO_URI=${MONGO_URI}
      - MONGO_DB=${MONGO_DB}
      - RABBITMQ_URI=${RABBITMQ_URI}
      - FRONTEND_URL=${FRONTEND_URL}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_LANDING_ZONE=${MINIO_LANDING_ZONE}
    # Resources limits in case it consumes too much
    mem_limit: 512m
    mem_reservation: 128m
    cpus: 0.5

  #############################################
  #             Digital twin panel            #
  #############################################

  frontend:
    build:
      context: ./frontend/web-app
      target: build
      args:
        - VITE_PORT=${VITE_PORT}
        - VITE_API_URL=${VITE_API_URL}
        - VITE_EMAIL_SENDER_PUBKEY=${VITE_EMAIL_SENDER_PUBKEY}
        - VITE_EMAIL_SENDER_SERVICEID=${VITE_EMAIL_SENDER_SERVICEID}
        - VITE_EMAIL_SENDER_TEMPLATEID=${VITE_EMAIL_SENDER_TEMPLATEID}
        - VITE_IV_BLOCK_PASSWD=${VITE_IV_BLOCK_PASSWD}
        - VITE_KEY_DECRYPT_PASSWD=${VITE_KEY_DECRYPT_PASSWD}
        - VITE_IMAGES_SERVER_URL=${VITE_IMAGES_SERVER_URL}
    volumes:
      - ./frontend/web-app/src:/app/src
      - ./frontend/web-app/static:/app/static
      - ./frontend/web-app/vite.config.ts:/app/vite.config.ts
      - ./frontend/web-app/tsconfig.json:/app/tsconfig.json
      - ./frontend/web-app/svelte.config.js:/app/svelte.config.js
    ports:
      - 3000:3000
    depends_on:
      - gin-gonic
    command: yarn dev --host

  # #############################################
  # #            Digital twin storage           #
  # #############################################

  mongo:
    image: mongo:6.0.7
    ports:
      - 27018:${MONGO_PORT}
    restart: always
    volumes:
      - ./storage/mongodb/mongodata:/data/db
      - ./storage/mongodb/init_db.js:/docker-entrypoint-initdb.d/init_db.js
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
      - MONGO_FIRST_USER_NAME=${MONGO_FIRST_USER_NAME}
      - MONGO_FIRST_USER_PASSWORD=${MONGO_FIRST_USER_PASSWORD}
      - MONGO_FIRST_USER_ROLE=${MONGO_FIRST_USER_ROLE}
    # To avoid logs in console
    command: mongod --quiet --logpath /dev/null

  # #############################################
  # #    Data lake and artifcat storage         #
  # #############################################

  minio:
    image: minio/minio:RELEASE.2023-02-27T18-10-45Z
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_URL=${MINIO_URL}
      - MINIO_NOTIFY_AMQP_ENABLE_primary=on
      - MINIO_NOTIFY_AMQP_URL_primary=${RABBITMQ_URI}
      - MINIO_NOTIFY_AMQP_EXCHANGE_primary=storage
      - MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_primary=direct
      - MINIO_NOTIFY_AMQP_ROUTING_KEY_primary=trusted
    entrypoint:
      - sh
      - /usr/bin/entrypoint.sh

    ports:
      - 9000:${MINIO_PORT}
      - 9001:${MINIO_PANEL_PORT}
    volumes:
      - ./storage/minio/data:/data
      - ./storage/minio/entrypoint.sh:/usr/bin/entrypoint.sh
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy

  # #############################################
  # #      Data ingestion, data processing      #
  # #      simulations, and machine learning    #
  # #############################################

  prefect:
    image: prefecthq/prefect:2.14.5-python3.11
    ports:
      - 4200:4200
    volumes:
      - prefect:/root/.prefect
    environment:
      - PREFECT_LOGGING_LEVEL=WARNING
      - PREFECT_UI_URL=http://127.0.0.0:4200/api
      - PREFECT_API_URL=http://127.0.0.1:4200/api
      - PREFECT_SERVER_API_HOST=0.0.0.0
    depends_on:
      rabbitmq:
        condition: service_healthy
    command: prefect server start

  data-pipeline-worker:
    build: data-pipelines
    restart: on-failure
    volumes:
      - ./data-pipelines:/opt/data-pipelines
    environment:
      - AGROSLAB_AUTH_TOKEN=${AGROSLAB_AUTH_TOKEN}
      - AGROSLAB_API_URL=${AGROSLAB_API_URL}
      - AGROSLAB_TELEDETECTION_URL=${AGROSLAB_TELEDETECTION_URL}
      - STORAGE_LANDING_ZONE=${MINIO_LANDING_ZONE}
      - STORAGE_TRUSTED_ZONE=${MINIO_TRUSTED_ZONE}
      - STORAGE_REFINED_ZONE=${MINIO_REFINED_ZONE}
      - RABBITMQ_URI=${RABBITMQ_URI}
      - MLFLOW_S3_ENDPOINT_URL=${MINIO_URL}
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - PREFECT_API_URL=http://prefect:4200/api
      - PREFECT_MINIO_ACCESS_ROOT=${MINIO_ROOT_USER}
      - PREFECT_MINIO_SECRET_ROOT=${MINIO_ROOT_PASSWORD}
      - PREFECT_MINIO_HOST=${MINIO_HOST}
      - PREFECT_MONGODB_HOST=${MONGO_URI}
      - PREFECT_MONGODB_DB=${MONGO_INITDB_DATABASE}
    entrypoint:
      - sh
      - /opt/data-pipelines/entrypoint.sh
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_started
    # Resource limit because it tends to use a lot of memory
    mem_limit: 2048m
    mem_reservation: 512m
    cpus: 1.0
  #############################################
  #              MLflow server                #
  #############################################

  # mlflow:
  #   build: mlflow
  #   restart: always
  #   ports:
  #     - 5000:5000
  #     - 5001:5001
  #   depends_on:
  #     - minio
  #   environment:
  #     - MLFLOW_S3_ENDPOINT_URL=${MINIO_URL}
  #     - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
  #     - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
  #   volumes:
  #     - ./mlflow/storage:/storage
  #   command: mlflow server --backend-store-uri file:///storage/runs --default-artifact-root s3://mlflow/ --serve-artifacts --host 0.0.0.0
  #   cpus: 0.5

  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:latest
  #   privileged: true
  #   ports:
  #     - 8081:8081
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #     - /etc/machine-id:/etc/machine-id:ro
  #   restart: always

volumes:
  prefect:

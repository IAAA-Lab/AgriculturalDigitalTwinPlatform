version: "3.8"

services:
  #############################################
  #         Monitoring and logging            #
  #############################################

  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./monitorization/prometheus:/etc/prometheus/
  #     - ./monitorization/prometheus/storage:/prometheus
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #     - "--storage.tsdb.path=/prometheus"
  #   ports:
  #     - 9090:9090

  # grafana:
  #   image: grafana/grafana:latest
  #   volumes:
  #     - ./monitorization/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
  #     - ./monitorization/grafana/grafana.ini:/etc/grafana/grafana.ini
  #     - ./monitorization/grafana/storage:/var/lib/grafana
  #     - ./monitorization/grafana/plugins:/var/lib/grafana/plugins
  #   restart: unless-stopped
  #   ports:
  #     - 3010:${GRAFANA_PORT}
  #   depends_on:
  #     - prometheus

  #############################################
  #              Data gateway                 #
  #############################################

  gin-gonic:
    build:
      context: ./api-gateway/gin-gonic
      target: local
    ports:
      - 8080:${GIN_PORT}
      - "9093:9093"
    volumes:
      - ./api-gateway/gin-gonic:/app
    restart: always
    depends_on:
      mongo:
        condition: service_started
    environment:
      - ENV_MODE=LOCAL
      - JWT_SECRET=${JWT_SECRET}
      - KEY_DECRYPT_PASSWD=${KEY_DECRYPT_PASSWD}
      - IV_BLOCK_PASSWD=${IV_BLOCK_PASSWD}
      - MONGO_URI=${MONGO_URI}
      - MONGO_DB=${MONGO_DB}
      - FRONTEND_URL=${FRONTEND_URL}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_LANDING_ZONE=${MINIO_LANDING_ZONE}
    # Resources limits in case it consumes too much
    mem_limit: 512m
    mem_reservation: 128m
    cpus: 1

  #############################################
  #             Digital twin panel            #
  #############################################

  frontend:
    build:
      context: ./frontend/web-app
      target: build
      args:
        - VITE_PORT=${VITE_PORT}
        - VITE_API_URL=${VITE_API_URL}
        - VITE_EMAIL_SENDER_PUBKEY=${VITE_EMAIL_SENDER_PUBKEY}
        - VITE_EMAIL_SENDER_SERVICEID=${VITE_EMAIL_SENDER_SERVICEID}
        - VITE_EMAIL_SENDER_TEMPLATEID=${VITE_EMAIL_SENDER_TEMPLATEID}
        - VITE_IV_BLOCK_PASSWD=${VITE_IV_BLOCK_PASSWD}
        - VITE_KEY_DECRYPT_PASSWD=${VITE_KEY_DECRYPT_PASSWD}
        - VITE_IMAGES_SERVER_URL=${VITE_IMAGES_SERVER_URL}
    volumes:
      - ./frontend/web-app/src:/app/src
      - ./frontend/web-app/static:/app/static
      - ./frontend/web-app/vite.config.ts:/app/vite.config.ts
      - ./frontend/web-app/tsconfig.json:/app/tsconfig.json
      - ./frontend/web-app/svelte.config.js:/app/svelte.config.js
    ports:
      - 3000:3000
    depends_on:
      - gin-gonic
    command: yarn dev --host

  ##############################################
  #             Digital twin storage           #
  ##############################################

  mongo:
    image: mongo:7.0
    ports:
      - 27017:27017
    restart: always
    volumes:
      - ./storage/mongodb/mongodata:/data/db
      - ./storage/mongodb/init_db.js:/docker-entrypoint-initdb.d/init_db.js
      - ./storage/mongodb/init_rs.sh:/data/init_rs.sh
      - ./storage/mongodb/mongo-keyfile.key:/data/mongo-keyfile.key
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
      - MONGO_FIRST_USER_NAME=${MONGO_FIRST_USER_NAME}
      - MONGO_FIRST_USER_PASSWORD=${MONGO_FIRST_USER_PASSWORD}
      - MONGO_FIRST_USER_ROLE=${MONGO_FIRST_USER_ROLE}
    # healthcheck:
    #   test: echo "try { rs.status() } catch (err) { rs.initiate()" | mongosh --port 27017 -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase ${MONGO_INITDB_DATABASE}
    #   interval: 3600s
    #   timeout: 15s
    #   start_period: 15s
    #   retries: 10
    command: mongod --replSet rs0 --keyFile /data/mongo-keyfile.key --bind_ip_all --port 27017 --quiet --logpath /dev/null

  ##############################################
  #                Data lake                   #
  ##############################################

  minio:
    image: minio/minio:RELEASE.2023-02-27T18-10-45Z
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_URL=${MINIO_URL}
      - MINIO_NOTIFY_WEBHOOK_ENABLE_landing=on
      - MINIO_NOTIFY_WEBHOOK_ENDPOINT_landing=http://gin-gonic:8080/temporal-webhook/landing
      - MINIO_NOTIFY_WEBHOOK_ENABLE_trusted=on
      - MINIO_NOTIFY_WEBHOOK_ENDPOINT_trusted=http://gin-gonic:8080/temporal-webhook/trusted
      - MINIO_NOTIFY_WEBHOOK_ENABLE_refined=on
      - MINIO_NOTIFY_WEBHOOK_ENDPOINT_refined=http://gin-gonic:8080/temporal-webhook/refined
    entrypoint:
      - sh
      - /usr/bin/entrypoint.sh
    ports:
      - 9000:${MINIO_PORT}
      - 9001:${MINIO_PANEL_PORT}
    volumes:
      - ./storage/minio/data:/data
      - ./storage/minio/entrypoint.sh:/usr/bin/entrypoint.sh
    restart: always
    depends_on:
      - gin-gonic

  #############################################
  #            Temporal server                #
  #############################################

  postgresql:
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:13
    ports:
      - 5432
    volumes:
      - ./storage/postgres/data:/var/lib/postgresql/data
    command: postgres -c 'max_connections=5000'

  temporal:
    container_name: temporal
    image: temporalio/auto-setup:1.24.2
    depends_on:
      - postgresql
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - TEMPORAL_CSRF_COOKIE_INSECURE=true # Required for the UI to send signals to the workflows
      # - AWS_ACCESS_KEY_ID = ${MINIO_ROOT_USER}
      # - AWS_SECRET_ACCESS_KEY = ${MINIO_ROOT_PASSWORD}
      - PROMETHEUS_ENDPOINT=0.0.0.0:8000
    ports:
      - 7233:7233
    volumes:
      - ./temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    cpus: "2"
    mem_limit: "1G"
  # temporal-admin-tools:
  #   container_name: temporal-admin-tools
  #   depends_on:
  #     - temporal
  #   environment:
  #     - TEMPORAL_ADDRESS=temporal:7233
  #     - TEMPORAL_CLI_ADDRESS=temporal:7233
  #   image: temporalio/admin-tools:${TEMPORAL_VERSION}
  #   stdin_open: true
  #   tty: true
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
      - TEMPORAL_CSRF_COOKIE_INSECURE=true
      - TEMPORAL_UI_PORT=8085
    image: temporalio/ui:2.29.1
    ports:
      - 8085:8085

  temporal-worker:
    container_name: temporal-worker
    build: ./temporal
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - AGROSLAB_AUTH_TOKEN=${AGROSLAB_AUTH_TOKEN}
      - AGROSLAB_API_URL=${AGROSLAB_API_URL}
      - AGROSLAB_TELEDETECTION_URL=${AGROSLAB_TELEDETECTION_URL}
      - MONGO_URI=${MONGO_URI}
      - MONGO_DB=${MONGO_DB}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_S3_ENDPOINT_URL=${MINIO_URL}
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
      - MINIO_HOST=${MINIO_ENDPOINT}
    volumes:
      - ./temporal/workflows:/etc/temporal/workflows
      - ./temporal/entrypoint.sh:/etc/temporal/entrypoint.sh
    entrypoint: /etc/temporal/entrypoint.sh
    cpus: "2"
    mem_limit: "2G"

  #############################################
  #              MLflow server                #
  #############################################

  mlflow:
    build: mlflow
    restart: always
    ports:
      - 5000:5000
      - 5001:5001
    depends_on:
      - minio
    environment:
      - MLFLOW_S3_ENDPOINT_URL=${MINIO_URL}
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./mlflow/storage:/storage
    command: mlflow server --backend-store-uri file:///storage/runs --default-artifact-root s3://mlflow/ --serve-artifacts --host 0.0.0.0
    cpus: "0.5"
    mem_limit: "512M"

  #############################################
  #              Benthos server               #
  #############################################

  benthos:
    image: ghcr.io/benthosdev/benthos:latest
    ports:
      - 4195:4195
      - 8056:8056 # Feedback port for digital twins feedback
    environment:
      - MONGO_URI=${MONGO_URI}
    volumes:
      - ./benthos/:/workflows
    entrypoint: /workflows/entrypoint.sh
